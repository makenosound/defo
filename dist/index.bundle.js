!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Defo=t()}(this,(function(){"use strict";function e(e,t){return function(e,t){return Object.keys(e.dataset).filter(e=>0===e.indexOf(t))}(e,t).length>0}function t(e){return e.charAt(0).toUpperCase()+e.slice(1)}function r(e){try{return JSON.parse(e)}catch(e){}return e}function o({prefix:e,scope:t,views:r}){Object.keys(r).forEach(o=>{const a=`data-${e}-${s=o,s.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`;var s;let i=Array.prototype.slice.call(t.querySelectorAll(`[${a}]`));t.hasAttribute(a)&&(i=[t].concat(i)),i.forEach(t=>{n(t,e,r,o)})})}function n(e,o,n,a){if(e._defoUpdate&&e._defoUpdate[a])return;const s=n[a],i=function(e,r){return`${o=e,o.replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,(e,t)=>t.toUpperCase()).replace(/\d+(\w|$)/g,e=>e.toUpperCase())}${t(r)}`;var o}(o,a);if(!s||!(i in e.dataset))return;const c=s(e,r(e.dataset[i]));e._defoUpdate=e._defoUpdate||{},e._defoDestroy=e._defoDestroy||{},e._defoUpdate[a]=function(e){return function(t,o){t=t?r(t):t,o=o?r(o):o,Promise.resolve(e).then(e=>{e.update&&e.update(t,o)})}}(c),e._defoDestroy[a]=function(e,t,r){return function(){Promise.resolve(e).then(e=>{e.destroy&&(e.destroy(),delete t._defoUpdate[r],delete t._defoDestroy[r])})}}(c,e,a)}function a({prefix:r,scope:a,views:s}){const i=new MutationObserver(a=>{a.forEach(a=>{const i=a.target;if("attributes"===a.type&&function(e,t){return 0===e.indexOf(`data-${t}-`)}(a.attributeName,r)){const e=a.attributeName.split("-").slice(2).map((e,r)=>r>0?t(e):e).join("");i.hasAttribute(a.attributeName)?null!==a.oldValue?i._defoUpdate[e](i.getAttribute(a.attributeName),a.oldValue):n(i,r,s,e):i._defoDestroy[e]()}else"childList"===a.type&&(Array.prototype.slice.call(a.removedNodes).filter(e=>e.nodeType===e.ELEMENT_NODE).filter(t=>e(t,r)).forEach(e=>{Object.keys(e._defoDestroy).forEach(t=>{e._defoDestroy[t]()})}),Array.prototype.slice.call(a.addedNodes).filter(e=>e.nodeType===e.ELEMENT_NODE).forEach(e=>{Promise.resolve(e).then(e=>{o({prefix:r,scope:e,views:s})})}))})});return i.observe(a,{attributes:!0,attributeOldValue:!0,childList:!0,characterData:!1,subtree:!0}),o({prefix:r,scope:a,views:s}),i}return function({prefix:e="defo",scope:t=document.documentElement,views:r={}}={}){const o=a({prefix:e,scope:t,views:r});return{destroy:()=>{o.disconnect()}}}}));
